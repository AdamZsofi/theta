name: CI/CD job orchestration
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      message:
        description: 'Summarize the contents since the last version'
        required: true
        default: 'Auto-generated release'

permissions: write-all


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Build
        uses: ./.github/actions/build-action
      - name: Upload JARs
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ThetaJars
          path: subprojects/**/*-all.jar
      - name: Positive outcome badge
        uses: ./.github/actions/badge-creation
        with:
          label: "${{ runner.os }} build"
          status: "Success"
          color: 'Green'
          path: "badges/build-${{ runner.os }}"
      - name: Negative outcome badge
        if: ${{ failure() }}
        uses: ./.github/actions/badge-creation
        with:
          label: "${{ runner.os }} build"
          status: "Failure"
          color: 'red'
          path: "badges/build-${{ runner.os }}"
  
  javadoc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Deploy javadoc to github-pages
        uses: ./.github/actions/deploy-javadoc

  test-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Run tests
        uses: ./.github/actions/test-action
      - name: Positive outcome badge
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: ./.github/actions/badge-creation
        with:
          label: "${{ runner.os }} test"
          status: "Success"
          color: 'Green'
          path: "badges/test-${{ runner.os }}"
      - name: Negative outcome badge
        if: ${{ failure() && matrix.os == 'ubuntu-latest' }}
        uses: ./.github/actions/badge-creation
        with:
          label: "${{ runner.os }} test"
          status: "Failure"
          color: 'red'
          path: "badges/test-${{ runner.os }}"
      # - name: Send test coverage to Codacy
      #   if: matrix.os == 'ubuntu-latest'
      #   shell: bash
      #   run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Java $(find '**/jacoco*.xml' -printf '-r %p ')
      #   env:
      #     CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      # - name: Add coverage to PR
      #   uses: madrapps/jacoco-report@v1.3
      #   with:
      #     paths: ${{ github.workspace }}/build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     min-coverage-overall: 40
      #     min-coverage-changed-files: 60


  deploy-release:
    needs: build
    if: "${{ github.event.inputs.message != '' }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Create release and deploy JARs
        uses: ./.github/actions/create-release
        with:
          message: ${{ inputs.message }}

  deploy-maven:
    needs: build
    if: "${{ github.event.inputs.message != '' }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Create and publish maven release 
        uses: ./.github/actions/deploy-maven
        with:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PWD: ${{ secrets.PGP_PWD }}
  
  deploy-docker:
    needs: build
    if: "${{ github.event.inputs.message != '' }}"
    strategy:
      matrix:
        dockerprojects: ["theta-cfa-cli", "theta-sts-cli", "theta-xsts-cli", "theta-xta-cli"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/workflows/docker-login
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          token: ${{secrets.DOCKER_TOKEN}}
      - name: Build and publish docker file 
        uses: ./.github/actions/deploy-maven
        with:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PWD: ${{ secrets.PGP_PWD }}

  run-sonar:
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        uses: ./.github/actions/cache-build
        with:
          arguments: build sonarqube --info -Dorg.gradle.jvmargs=-XX:MaxMetaspaceSize=512m

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Deploy docs
        uses: ./.github/actions/deploy-docs