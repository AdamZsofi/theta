name: CI/CD job orchestration
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  workflow_call:
  workflow_run:
    workflows: ["Version Bump"]
    types:
      - completed

permissions: write-all


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Build
        uses: ./.github/actions/build-action
  
  javadoc: # deploys to GH pages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Deploy javadoc to github-pages
        uses: ./.github/actions/deploy-javadoc

  test-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Run tests
        uses: ./.github/actions/test-action
      - name: Send test coverage to Codacy
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Java $(find '**/jacoco*.xml' -printf '-r %p ')
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  test-windows: # does not need build, does not benefit from caching
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-2019, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: setup rsync for windows
        if: runner.os == 'Windows'
        uses: GuillaumeFalourd/setup-rsync@v1.1
      - name: Deploy badges
        if: github.ref == 'refs/heads/master' && ${{ always() }}
        uses: leventeBajczi/github-pages-deploy-action-winfix@6d31a3c68a3912555731864c0d5ef4239b02369d # v0.3
        with:
          branch: badges
          folder: lib
          target-folder: badges/proba
          single-commit: true
      - name: Install VC-Redist 2010 and 2012
        run: |
          Install-Module -Name VcRedist -Force
          $VcList = Get-VcList -Export All | Where-Object { $_.Release -eq "2010" -or $_.Release -eq "2012" }
          Save-VcRedist -VcList $VcList
          Install-VcRedist -VcList $VcList -Silent
      - name: Build
        uses: ./.github/actions/build-action
      - name: Run tests
        uses: ./.github/actions/test-action

  test-mac: # does not need build, does not benefit from caching
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-13, macos-12, macos-11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Build
        uses: ./.github/actions/build-action
      - name: Run tests
        uses: ./.github/actions/test-action

  deploy-release:
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Retrieve message
        run: |
          export message=$( echo $(git log -1 --format=%s) | grep -oP "\[.*\]" |tail -c +2 | head -c -2 || echo 'Auto-generated release')
          echo Commit message: $(git log -1 --format=%s)
          echo Message: $message
          echo "MESSAGE=$message" >> $GITHUB_OUTPUT
        id: message
      - name: Create release and deploy JARs
        uses: ./.github/actions/create-release
        with:
          message: ${{ steps.message.outputs.MESSAGE }}

  deploy-maven:
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Create and publish maven release 
        uses: ./.github/actions/deploy-maven
        with:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PWD: ${{ secrets.PGP_PWD }}
  
  deploy-docker:
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        dockerprojects: ["theta-cfa-cli", "theta-sts-cli", "theta-xsts-cli", "theta-xta-cli"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/workflows/docker-login
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          token: ${{secrets.DOCKER_TOKEN}}
      - name: Build and publish docker file 
        uses: ./.github/actions/deploy-maven
        with:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PWD: ${{ secrets.PGP_PWD }}